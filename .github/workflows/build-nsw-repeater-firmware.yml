name: Build NSW Repeater Firmwares

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    # Run every Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  push:
    tags:
      - 'repeater-*'

jobs:

  create-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
    
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4

      - name: Create Tag
        id: create_tag
        run: |
          # Get current week and year (ISO week date format)
          WEEK=$(date +%V)
          YEAR=$(date +%Y)
          TAG_NAME="repeater-nsw-${YEAR}.${WEEK}"
          
          echo "Creating tag: ${TAG_NAME}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists
          if git rev-parse "${TAG_NAME}" >/dev/null 2>&1; then
            echo "Tag ${TAG_NAME} already exists"
          else
            # Create and push tag
            git tag -a "${TAG_NAME}" -m "Weekly NSW Repeater Firmware Release - Week ${WEEK}, ${YEAR}"
            git push origin "${TAG_NAME}"
            echo "Tag ${TAG_NAME} created and pushed"
          fi
          
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: always()
    
    strategy:
      fail-fast: false
      matrix:
        target:
          - Heltec_t114_without_display_repeater
          - Heltec_t114_repeater
          - RAK_4631_repeater
          - Xiao_nrf52_repeater
    
    env:
      DEFAULT_NODE_NAME: "AU_NSW Repeater"
      LORA_FREQ: "915.8"
      LORA_BW: "250"
      LORA_SF: "11"
      LORA_CR: "5"
    
    steps:

      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag_name || github.ref }}

      - name: Setup Build Environment
        uses: ./.github/actions/setup-build-environment

      - name: Set firmware version
        run: |
          if [ -n "${{ env.GIT_TAG_VERSION }}" ] && [ "${{ env.GIT_TAG_VERSION }}" != "refs/heads/main" ]; then
            echo "FIRMWARE_VERSION=${{ env.GIT_TAG_VERSION }}" >> $GITHUB_ENV
          else
            echo "FIRMWARE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
          echo "Firmware version set to: ${FIRMWARE_VERSION}"

      - name: Build Firmware (${{ matrix.target }})
        env:
          PLATFORMIO_BUILD_FLAGS: >-
            -DLORA_FREQ=${{ env.LORA_FREQ }}
            -DLORA_BW=${{ env.LORA_BW }}
            -DLORA_SF=${{ env.LORA_SF }}
            -DLORA_CR=${{ env.LORA_CR }}
            -DDEFAULT_NODE_NAME='"${{ env.DEFAULT_NODE_NAME }}"'
        run: |
          echo "Building with FIRMWARE_VERSION=${FIRMWARE_VERSION}"
          /usr/bin/env bash build.sh build-firmware ${{ matrix.target }}

      - name: List build outputs
        run: |
          echo "Contents of out/ directory:"
          ls -lah out/ || echo "out/ directory not found"
          echo "Contents of .pio/build/${{ matrix.target }}:"
          ls -lah .pio/build/${{ matrix.target }}/ || echo "Build directory not found"

      - name: Upload Workflow Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware_${{ matrix.target }}
          path: out
          if-no-files-found: warn

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') || needs.create-tag.outputs.tag_name != ''
        with:
          tag_name: ${{ needs.create-tag.outputs.tag_name || github.ref_name }}
          files: out/*
          fail_on_unmatched_files: false
          make_latest: true
          draft: false
          prerelease: false